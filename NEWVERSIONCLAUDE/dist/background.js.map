{"version":3,"file":"background.js","mappings":"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","sources":["webpack://quick-saver/./src/config/marketplaces.ts","webpack://quick-saver/./src/services/currencyConverter.ts","webpack://quick-saver/./src/services/priceComparison.ts","webpack://quick-saver/./src/background/index.ts"],"sourcesContent":["export const MARKETPLACES = {\n    'amazon.com.au': {\n        currency: 'AUD',\n        language: 'en-AU',\n        region: 'Australia'\n    },\n    'amazon.com.be': {\n        currency: 'EUR',\n        language: 'nl-BE',\n        region: 'Belgium'\n    },\n    'amazon.com.br': {\n        currency: 'BRL',\n        language: 'pt-BR',\n        region: 'Brazil'\n    },\n    'amazon.ca': {\n        currency: 'CAD',\n        language: 'en-CA',\n        region: 'Canada'\n    },\n    'amazon.cn': {\n        currency: 'CNY',\n        language: 'zh-CN',\n        region: 'China'\n    },\n    'amazon.eg': {\n        currency: 'EGP',\n        language: 'ar-EG',\n        region: 'Egypt'\n    },\n    'amazon.fr': {\n        currency: 'EUR',\n        language: 'fr-FR',\n        region: 'France'\n    },\n    'amazon.de': {\n        currency: 'EUR',\n        language: 'de-DE',\n        region: 'Germany'\n    },\n    'amazon.in': {\n        currency: 'INR',\n        language: 'en-IN',\n        region: 'India'\n    },\n    'amazon.it': {\n        currency: 'EUR',\n        language: 'it-IT',\n        region: 'Italy'\n    },\n    'amazon.co.jp': {\n        currency: 'JPY',\n        language: 'ja-JP',\n        region: 'Japan'\n    },\n    'amazon.com.mx': {\n        currency: 'MXN',\n        language: 'es-MX',\n        region: 'Mexico'\n    },\n    'amazon.nl': {\n        currency: 'EUR',\n        language: 'nl-NL',\n        region: 'Netherlands'\n    },\n    'amazon.pl': {\n        currency: 'PLN',\n        language: 'pl-PL',\n        region: 'Poland'\n    },\n    'amazon.sa': {\n        currency: 'SAR',\n        language: 'ar-SA',\n        region: 'Saudi Arabia'\n    },\n    'amazon.sg': {\n        currency: 'SGD',\n        language: 'en-SG',\n        region: 'Singapore'\n    },\n    'amazon.es': {\n        currency: 'EUR',\n        language: 'es-ES',\n        region: 'Spain'\n    },\n    'amazon.se': {\n        currency: 'SEK',\n        language: 'sv-SE',\n        region: 'Sweden'\n    },\n    'amazon.com.tr': {\n        currency: 'TRY',\n        language: 'tr-TR',\n        region: 'Turkey'\n    },\n    'amazon.ae': {\n        currency: 'AED',\n        language: 'ar-AE',\n        region: 'UAE'\n    },\n    'amazon.co.uk': {\n        currency: 'GBP',\n        language: 'en-GB',\n        region: 'United Kingdom'\n    },\n    'amazon.com': {\n        currency: 'USD',\n        language: 'en-US',\n        region: 'United States'\n    }\n};\n","export class CurrencyConverter {\n    constructor() {\n        this.rates = {};\n        this.lastUpdate = 0;\n        this.UPDATE_INTERVAL = 3600000; // 1 hour\n        this.initializeDefaultRates();\n    }\n    static getInstance() {\n        if (!CurrencyConverter.instance) {\n            CurrencyConverter.instance = new CurrencyConverter();\n        }\n        return CurrencyConverter.instance;\n    }\n    initializeDefaultRates() {\n        // Base currency is EUR\n        this.rates = {\n            EUR: 1.0,\n            USD: 1.09, // US Dollar\n            GBP: 0.85, // British Pound\n            JPY: 158.0, // Japanese Yen\n            AUD: 1.65, // Australian Dollar\n            CAD: 1.46, // Canadian Dollar\n            CHF: 0.93, // Swiss Franc\n            CNY: 7.82, // Chinese Yuan\n            INR: 90.5, // Indian Rupee\n            BRL: 5.35, // Brazilian Real\n            MXN: 18.5, // Mexican Peso\n            PLN: 4.33, // Polish Złoty\n            SEK: 11.3, // Swedish Krona\n            TRY: 33.2, // Turkish Lira\n            AED: 4.0, // UAE Dirham\n            SAR: 4.1, // Saudi Riyal\n            SGD: 1.46, // Singapore Dollar\n            EGP: 33.6 // Egyptian Pound\n        };\n    }\n    async updateRates() {\n        try {\n            // Check if we need to update\n            const now = Date.now();\n            if (now - this.lastUpdate < this.UPDATE_INTERVAL) {\n                return;\n            }\n            // In a production environment, you would use a real exchange rate API\n            // For example:\n            // const response = await fetch('https://api.exchangerate-api.com/v4/latest/EUR');\n            // const data = await response.json();\n            // this.rates = data.rates;\n            // For now, we'll use our default rates\n            this.initializeDefaultRates();\n            this.lastUpdate = now;\n            // Store the rates in chrome.storage for persistence\n            await chrome.storage.local.set({\n                exchangeRates: this.rates,\n                lastRatesUpdate: this.lastUpdate\n            });\n        }\n        catch (error) {\n            console.error('Error updating exchange rates:', error);\n            // Fallback to stored rates if available\n            const { exchangeRates, lastRatesUpdate } = await chrome.storage.local.get([\n                'exchangeRates',\n                'lastRatesUpdate'\n            ]);\n            if (exchangeRates) {\n                this.rates = exchangeRates;\n                this.lastUpdate = lastRatesUpdate;\n            }\n        }\n    }\n    async convert(amount, fromCurrency, toCurrency) {\n        await this.updateRates();\n        // If currencies are the same, return original amount\n        if (fromCurrency === toCurrency) {\n            return amount;\n        }\n        // Convert to EUR first (our base currency)\n        const amountInEUR = fromCurrency === 'EUR'\n            ? amount\n            : amount / (this.rates[fromCurrency] || 1);\n        // Convert from EUR to target currency\n        const result = toCurrency === 'EUR'\n            ? amountInEUR\n            : amountInEUR * (this.rates[toCurrency] || 1);\n        // Round to 2 decimal places\n        return Math.round(result * 100) / 100;\n    }\n    async getRate(fromCurrency, toCurrency) {\n        await this.updateRates();\n        if (fromCurrency === toCurrency) {\n            return 1;\n        }\n        const fromRate = this.rates[fromCurrency] || 1;\n        const toRate = this.rates[toCurrency] || 1;\n        return toRate / fromRate;\n    }\n    getSupportedCurrencies() {\n        return Object.keys(this.rates);\n    }\n}\n","import { MARKETPLACES } from '../config/marketplaces';\nimport { CurrencyConverter } from './currencyConverter';\nexport class PriceComparisonService {\n    constructor() {\n        this.cache = new Map();\n        this.pricePatterns = [\n            /\"price\":\\s*\"?(\\d+[.,]\\d{2})\"?/,\n            /\"priceAmount\":\\s*\"?(\\d+[.,]\\d{2})\"?/,\n            /\"priceTotal\":\\s*\\{\\s*\"text\":\\s*\"[^\"]*?(\\d+[.,]\\d{2})\"?/,\n            /data-price=\"(\\d+[.,]\\d{2})\"/,\n            /data-a-price-whole[^>]+>(\\d+)<[^>]+>([.,]\\d{2})</,\n        ];\n        this.currencyConverter = CurrencyConverter.getInstance();\n    }\n    async comparePrice(product) {\n        console.log('Starting price comparison for product:', product);\n        const marketplaces = Object.keys(MARKETPLACES).filter(m => m !== product.marketplace);\n        // Start all requests in parallel immediately\n        const promises = marketplaces.map(marketplace => {\n            const cacheKey = `${product.asin}-${marketplace}`;\n            const cached = this.cache.get(cacheKey);\n            if (cached && Date.now() - cached.timestamp < PriceComparisonService.CACHE_DURATION) {\n                console.log('Using cached data for', marketplace);\n                return Promise.resolve(cached.data);\n            }\n            return this.fetchWithRetry(product.asin, marketplace);\n        });\n        // Wait for all results with a timeout\n        const results = await Promise.all(promises.map(p => Promise.race([\n            p,\n            new Promise(resolve => setTimeout(() => resolve(null), PriceComparisonService.TIMEOUT))\n        ])));\n        const validResults = results.filter((r) => r !== null);\n        console.log('Valid results:', validResults.length);\n        // Convert prices in parallel\n        const convertedResults = await Promise.all(validResults.map(async (result) => ({\n            ...result,\n            convertedPrice: await this.currencyConverter.convert(result.currentPrice, result.currency, product.currency)\n        })));\n        // Sort results by price\n        const sortedResults = convertedResults.sort((a, b) => (a.convertedPrice || Infinity) - (b.convertedPrice || Infinity));\n        const bestPrice = sortedResults[0];\n        const priceDifference = bestPrice\n            ? product.currentPrice - bestPrice.convertedPrice\n            : 0;\n        const comparison = {\n            original: product,\n            alternatives: sortedResults,\n            bestPrice: bestPrice || null,\n            priceDifference,\n            lastUpdated: Date.now()\n        };\n        return comparison;\n    }\n    async fetchWithRetry(asin, marketplace, retryCount = 0) {\n        try {\n            const result = await this.fetchFromMarketplace(asin, marketplace);\n            if (!result && retryCount < PriceComparisonService.MAX_RETRIES) {\n                console.log(`Retrying ${marketplace}, attempt ${retryCount + 1}`);\n                await new Promise(resolve => setTimeout(resolve, PriceComparisonService.RETRY_DELAY));\n                return this.fetchWithRetry(asin, marketplace, retryCount + 1);\n            }\n            if (result) {\n                const cacheKey = `${asin}-${marketplace}`;\n                this.cache.set(cacheKey, { data: result, timestamp: Date.now() });\n                console.log('Fetched and cached data for', marketplace);\n            }\n            return result;\n        }\n        catch (error) {\n            console.error(`Error in fetchWithRetry for ${marketplace}:`, error);\n            return null;\n        }\n    }\n    async fetchFromMarketplace(asin, marketplace) {\n        try {\n            const marketplaceInfo = MARKETPLACES[marketplace];\n            const url = `https://www.${marketplace}/dp/${asin}`;\n            console.log('Fetching from marketplace:', marketplace, url);\n            const response = await fetch(url, {\n                headers: {\n                    'Accept': 'text/html',\n                    'Accept-Language': marketplaceInfo.language,\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n                },\n                credentials: 'omit'\n            });\n            if (!response.ok) {\n                console.log('Failed to fetch from', marketplace, response.status);\n                return null;\n            }\n            const text = await response.text();\n            let price = null;\n            for (const pattern of this.pricePatterns) {\n                const match = text.match(pattern);\n                if (match) {\n                    if (match.length === 3) { // Whole + decimal parts\n                        price = parseFloat(`${match[1]}.${match[2].replace(',', '.')}`);\n                    }\n                    else {\n                        price = parseFloat(match[1].replace(',', '.'));\n                    }\n                    break;\n                }\n            }\n            if (!price) {\n                console.log('No price found for', marketplace);\n                return null;\n            }\n            const titlePattern = /\"product-title\"[^>]*>([^<]+)<|productTitle\"[^>]*>([^<]+)</;\n            const titleMatch = text.match(titlePattern);\n            const title = titleMatch ? (titleMatch[1] || titleMatch[2]).trim() : '';\n            const product = {\n                asin,\n                title,\n                currentPrice: price,\n                currency: marketplaceInfo.currency,\n                marketplace,\n                url\n            };\n            console.log('Successfully extracted product from', marketplace, product);\n            return product;\n        }\n        catch (error) {\n            console.error(`Error fetching from ${marketplace}:`, error);\n            return null;\n        }\n    }\n}\nPriceComparisonService.TIMEOUT = 8000; // 8 seconds\nPriceComparisonService.RETRY_DELAY = 1000; // 1 second\nPriceComparisonService.MAX_RETRIES = 1; // Reduced retries for faster response\nPriceComparisonService.CACHE_DURATION = 1800000; // 30 minutes\n","import { PriceComparisonService } from '../services/priceComparison';\nimport { MARKETPLACES } from '../config/marketplaces';\n// Initialize services\nconst priceComparisonService = new PriceComparisonService();\nconst priceCache = new Map();\nconst CACHE_DURATION = 1800000; // 30 minutes\n// Preload exchange rates\nasync function preloadExchangeRates() {\n    try {\n        const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD');\n        const data = await response.json();\n        await chrome.storage.local.set({ exchangeRates: { rates: data.rates, timestamp: Date.now() } });\n    }\n    catch (error) {\n        console.error('Failed to preload exchange rates:', error);\n    }\n}\n// Preload prices for a product across all marketplaces\nasync function preloadPrices(product) {\n    const marketplaces = Object.keys(MARKETPLACES).filter(m => m !== product.marketplace);\n    // Start all requests in parallel\n    const promises = marketplaces.map(async (marketplace) => {\n        try {\n            const cacheKey = `${product.asin}-${marketplace}`;\n            const cached = priceCache.get(cacheKey);\n            if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n                return cached.data;\n            }\n            const result = await priceComparisonService.fetchFromMarketplace(product.asin, marketplace);\n            if (result) {\n                priceCache.set(cacheKey, { data: result, timestamp: Date.now() });\n            }\n            return result;\n        }\n        catch (error) {\n            console.error(`Error preloading price for ${marketplace}:`, error);\n            return null;\n        }\n    });\n    // Wait for all requests to complete\n    await Promise.all(promises);\n}\n// Listen for messages from content script\nchrome.runtime.onMessage.addListener((message, _sender, sendResponse) => {\n    console.log('Background script received message:', message);\n    (async () => {\n        try {\n            switch (message.type) {\n                case 'COMPARE_PRICES': {\n                    console.log('Processing price comparison for:', message.payload);\n                    const product = message.payload;\n                    if (!product || !product.asin || !product.marketplace) {\n                        throw new Error('Invalid product data received');\n                    }\n                    // First, quickly return cached results if available\n                    const cachedComparison = await getCachedComparison(product);\n                    if (cachedComparison) {\n                        sendResponse(cachedComparison);\n                        // After sending cached results, preload fresh prices\n                        preloadPrices(product);\n                        return;\n                    }\n                    // If no cache, get fresh comparison\n                    const comparison = await priceComparisonService.comparePrice(product);\n                    console.log('Comparison result:', comparison);\n                    if (!comparison || !comparison.alternatives) {\n                        throw new Error('Invalid comparison result');\n                    }\n                    // Cache the comparison result\n                    await chrome.storage.local.set({\n                        [`comparison-${product.asin}`]: {\n                            data: comparison,\n                            timestamp: Date.now()\n                        }\n                    });\n                    sendResponse(comparison);\n                    break;\n                }\n                case 'UPDATE_SETTINGS': {\n                    console.log('Updating settings:', message.payload);\n                    await chrome.storage.local.set({ settings: message.payload });\n                    sendResponse({ success: true });\n                    break;\n                }\n                case 'GET_EXCHANGE_RATES': {\n                    const { exchangeRates } = await chrome.storage.local.get('exchangeRates');\n                    if (!exchangeRates || Date.now() - exchangeRates.timestamp > 3600000) {\n                        // Refresh rates if older than 1 hour\n                        await preloadExchangeRates();\n                    }\n                    sendResponse({ success: true, rates: exchangeRates?.rates || {} });\n                    break;\n                }\n                default: {\n                    console.warn('Unknown message type:', message.type);\n                    sendResponse({ error: 'Unknown message type' });\n                }\n            }\n        }\n        catch (error) {\n            console.error('Error in background script:', error);\n            sendResponse({\n                error: error instanceof Error ? error.message : 'An unexpected error occurred',\n                success: false\n            });\n        }\n    })();\n    return true;\n});\n// Helper function to get cached comparison\nasync function getCachedComparison(product) {\n    const { [`comparison-${product.asin}`]: cached } = await chrome.storage.local.get(`comparison-${product.asin}`);\n    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n        console.log('Using cached comparison');\n        return cached.data;\n    }\n    return null;\n}\n// Set up alarm for periodic price checks and cache cleanup\nchrome.alarms.create('checkPrices', { periodInMinutes: 30 });\nchrome.alarms.create('cleanupCache', { periodInMinutes: 60 });\nchrome.alarms.onAlarm.addListener(async (alarm) => {\n    if (alarm.name === 'checkPrices') {\n        try {\n            const { savedProducts } = await chrome.storage.local.get('savedProducts');\n            if (!savedProducts)\n                return;\n            for (const product of savedProducts) {\n                if (!product || !product.marketplace || !product.asin) {\n                    console.error('Invalid saved product:', product);\n                    continue;\n                }\n                const comparison = await priceComparisonService.comparePrice(product);\n                if (comparison.priceDifference > 0) {\n                    chrome.notifications.create({\n                        type: 'basic',\n                        iconUrl: 'assets/icon128.png',\n                        title: 'Price Drop Alert!',\n                        message: `The price for ${product.title} has dropped by ${comparison.priceDifference.toFixed(2)} ${product.currency}`\n                    });\n                }\n            }\n        }\n        catch (error) {\n            console.error('Error checking prices:', error instanceof Error ? error.message : 'Unknown error');\n        }\n    }\n    else if (alarm.name === 'cleanupCache') {\n        // Cleanup old cache entries\n        for (const [key, value] of priceCache.entries()) {\n            if (Date.now() - value.timestamp > CACHE_DURATION) {\n                priceCache.delete(key);\n            }\n        }\n    }\n});\n"],"names":["MARKETPLACES","currency","language","region","CurrencyConverter","constructor","this","rates","lastUpdate","UPDATE_INTERVAL","initializeDefaultRates","getInstance","instance","EUR","USD","GBP","JPY","AUD","CAD","CHF","CNY","INR","BRL","MXN","PLN","SEK","TRY","AED","SAR","SGD","EGP","updateRates","now","Date","chrome","storage","local","set","exchangeRates","lastRatesUpdate","error","console","get","convert","amount","fromCurrency","toCurrency","amountInEUR","result","Math","round","getRate","fromRate","getSupportedCurrencies","Object","keys","PriceComparisonService","cache","Map","pricePatterns","currencyConverter","comparePrice","product","log","promises","filter","m","marketplace","map","cacheKey","asin","cached","timestamp","CACHE_DURATION","Promise","resolve","data","fetchWithRetry","validResults","all","p","race","setTimeout","TIMEOUT","r","length","sortedResults","async","convertedPrice","currentPrice","sort","a","b","Infinity","bestPrice","priceDifference","original","alternatives","lastUpdated","retryCount","fetchFromMarketplace","MAX_RETRIES","RETRY_DELAY","marketplaceInfo","url","response","fetch","headers","credentials","ok","status","text","price","pattern","match","parseFloat","replace","titlePattern","titleMatch","title","trim","priceComparisonService","priceCache","runtime","onMessage","addListener","message","_sender","sendResponse","type","payload","Error","cachedComparison","getCachedComparison","preloadPrices","comparison","settings","success","json","preloadExchangeRates","warn","alarms","create","periodInMinutes","onAlarm","alarm","name","savedProducts","notifications","iconUrl","toFixed","key","value","entries","delete"],"sourceRoot":""}